# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j7hYEOhFUQUFwNGYSx0PC-sWQfHklVZL
"""

class MrKrabs:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        result = ""
        if self.data.startswith("m"):
            self.data = self.data[::-1]
            result = self.process_mr_krabs_data()
        elif self.data.startswith("sb"):
            spongebob = SpongeBob(self.data)
            result = spongebob.process_data()
        elif self.data.startswith("s") and self.data[1] != "b":
            squidward = Squidward(self.data)
            result = squidward.process_data()
        elif self.data.endswith("m"):
            result = self.process_mr_krabs_data()
        elif self.data.endswith("bs"):
            self.data = self.data[::-1]
            spongebob = SpongeBob(self.data)
            result = spongebob.process_data()
        elif self.data.endswith("s") and self.data[-2] != "b":
            self.data = self.data[::-1]
            squidward = Squidward(self.data)
            result = squidward.process_data()
        else:
            result = "invalid input"
        return result

    def process_mr_krabs_data(self):
        result = self.data.replace("tt", "o")
        tee = self.data[:10].replace("tt", "o")
        return result + tee

class SpongeBob:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        result = self.sort_dna_length(self.data)
        return result

    def merge_sort(self, arr):
        if len(arr) > 1:
            mid = len(arr) // 2
            sub_array1 = arr[:mid]
            sub_array2 = arr[mid:]
            self.merge_sort(sub_array1)
            self.merge_sort(sub_array2)
            i = j = k = 0
            while i < len(sub_array1) and j < len(sub_array2):
                if sub_array1[i] < sub_array2[j]:
                    arr[k] = sub_array1[i]
                    i += 1
                else:
                    arr[k] = sub_array2[j]
                    j += 1
                    k += 1
            while i < len(sub_array1):
                arr[k] = sub_array1[i]
                i += 1
                k += 1
            while j < len(sub_array2):
                arr[k] = sub_array2[j]
                j += 1
                k += 1

    def sort_dna_length(self, dna_sequence):
        length_str = str(len(dna_sequence))
        jeff = [int(length_str[i]) for i in range(len(length_str))]
        self.merge_sort(jeff)
        sorted_length = ""
        for i in range(len(jeff)):
            if i == 0:
                sorted_length += str(jeff[i] + 1)
            else:
                sorted_length += str(jeff[i])
        return sorted_length

class Squidward:
    def __init__(self, data):
        self.data = data

    def process_data(self):
        result = ""
        flag = False
        i = 0
        ffs = 0

        while i < len(self.data):
            count = 1

            if flag == False and self.data[i] == "x":
                ffs += i
                flag = True

            while i + count < len(self.data) and self.data[i] == self.data[i + count]:
                count += 1
                # count reaches 4
                if count + 1 == 4:
                    break

            if count >= 3:
                result += "(0_0)"
                i += count

            else:
                result += self.data[i]
                i += 1

            if flag == True:
                result += str(ffs)
        return result


input_data = input()

mr_krabs = MrKrabs(input_data)

result = mr_krabs.process_data()
print(result)