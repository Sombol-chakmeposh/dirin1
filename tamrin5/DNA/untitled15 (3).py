# -*- coding: utf-8 -*-
"""Untitled15.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j7hYEOhFUQUFwNGYSx0PC-sWQfHklVZL
"""

data = input()

if data[-1] in ["m", "s"]:
    data = data[::-1]

if data.startswith("m"):
    processor = mrKrabs(data)
elif data.startswith("sb"):
    processor = spongeBob(data)
elif data.startswith("s") and data[1] != "b":
    processor = octopus(data)
else:
    print("invalid input")
    exit(1)

print(processor.process())

class MrKrabs:
    def __init__(self, data):
        self.data = data

    def process(self):
        result = self.data.replace("tt", "o")
        return result + result[:10]

class SpongeBob:
    def __init__(self, data):
        self.data = data

    def process(self):
        def mergeSort(arr):
            if len(arr) > 1:
                mid = len(arr)//2
                sub_array1, sub_array2 = arr[:mid], arr[mid:]
                mergeSort(sub_array1)
                mergeSort(sub_array2)

                i = j = k = 0
                while i < len(sub_array1) and j < len(sub_array2):
                    if sub_array1[i] < sub_array2[j]:
                        arr[k] = sub_array1[i]
                        i += 1
                    else:
                        arr[k] = sub_array2[j]
                        j += 1
                    k += 1

                while i < len(sub_array1):
                    arr[k] = sub_array1[i]
                    i += 1
                    k += 1

                while j < len(sub_array2):
                    arr[k] = sub_array2[j]
                    j += 1
                    k += 1

        def sort_dna_length(dna_sequence):
            length_str = list(str(len(dna_sequence)))
            dirin = [int(i) for i in length_str]
            mergeSort(dirin)
            sorted_length = "".join([str(dirin[i]+1) if i==0 else str(dirin[i]) for i in range(len(dirin))])
            return sorted_length

        return sort_dna_length(self.data)

class Octopus:
    def __init__(self, data):
        self.data = data

    def process(self):
        result = ""
        i = 0
        while i < len(self.data):
            count = 1
            while i + count < len(self.data) and self.data[i] == self.data[i + count]:
                count += 1
                if count == 3:
                    result += "(0_0)"
                    i += count
                    break
            if count < 3:
                result += self.data[i]
                i += 1
        return result